{"ast":null,"code":"import { numberPattern } from './format';\nexport var onlyNumbers = function onlyNumbers(value) {\n  var auxCep = (value || \"\").match(numberPattern);\n  return (auxCep || []).join(\"\");\n};\nexport var validateCPF = function validateCPF(_strCPF) {\n  var strCPF = onlyNumbers(_strCPF);\n  if (strCPF.length !== 11) return false;\n  var soma;\n  var resto;\n  soma = 0;\n  if (strCPF == \"00000000000\") return false;\n\n  for (var i = 1; i <= 9; i++) {\n    soma = soma + parseInt(strCPF.substring(i - 1, i)) * (11 - i);\n  }\n\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != parseInt(strCPF.substring(9, 10))) return false;\n  soma = 0;\n\n  for (var j = 1; j <= 10; j++) {\n    soma = soma + parseInt(strCPF.substring(j - 1, j)) * (12 - j);\n  }\n\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != parseInt(strCPF.substring(10, 11))) return false;\n  return true;\n};\nexport default {\n  validateCPF: validateCPF,\n  onlyNumbers: onlyNumbers\n};","map":{"version":3,"sources":["F:/ASSESSOR_ECO/ECO_LOJ/utils/validate.js"],"names":["numberPattern","onlyNumbers","value","auxCep","match","join","validateCPF","_strCPF","strCPF","length","soma","resto","i","parseInt","substring","j"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,UAA5B;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAClC,MAAMC,MAAM,GAAG,CAACD,KAAK,IAAI,EAAV,EAAcE,KAAd,CAAoBJ,aAApB,CAAf;AACA,SAAO,CAACG,MAAM,IAAI,EAAX,EAAeE,IAAf,CAAoB,EAApB,CAAP;AACH,CAHM;AAKP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAa;AACpC,MAAMC,MAAM,GAAGP,WAAW,CAACM,OAAD,CAA1B;AACA,MAAIC,MAAM,CAACC,MAAP,KAAkB,EAAtB,EAA0B,OAAO,KAAP;AAC1B,MAAIC,IAAJ;AACA,MAAIC,KAAJ;AACAD,EAAAA,IAAI,GAAG,CAAP;AACA,MAAIF,MAAM,IAAI,aAAd,EAA6B,OAAO,KAAP;;AAE7B,OAAK,IAAII,CAAC,GAAC,CAAX,EAAcA,CAAC,IAAE,CAAjB,EAAoBA,CAAC,EAArB,EAAyB;AACjBF,IAAAA,IAAI,GAAGA,IAAI,GAAGG,QAAQ,CAACL,MAAM,CAACM,SAAP,CAAiBF,CAAC,GAAC,CAAnB,EAAsBA,CAAtB,CAAD,CAAR,IAAsC,KAAKA,CAA3C,CAAd;AACP;;AACDD,EAAAA,KAAK,GAAID,IAAI,GAAG,EAAR,GAAc,EAAtB;AAEA,MAAKC,KAAK,IAAI,EAAV,IAAkBA,KAAK,IAAI,EAA/B,EAAoCA,KAAK,GAAG,CAAR;AACpC,MAAIA,KAAK,IAAIE,QAAQ,CAACL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoB,EAApB,CAAD,CAArB,EAAgD,OAAO,KAAP;AAEhDJ,EAAAA,IAAI,GAAG,CAAP;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBA,CAAC,EAA1B,EAA+B;AAC3BL,IAAAA,IAAI,GAAGA,IAAI,GAAGG,QAAQ,CAACL,MAAM,CAACM,SAAP,CAAiBC,CAAC,GAAC,CAAnB,EAAsBA,CAAtB,CAAD,CAAR,IAAsC,KAAKA,CAA3C,CAAd;AACH;;AACDJ,EAAAA,KAAK,GAAID,IAAI,GAAG,EAAR,GAAa,EAArB;AAEA,MAAKC,KAAK,IAAI,EAAV,IAAkBA,KAAK,IAAI,EAA/B,EAAoCA,KAAK,GAAG,CAAR;AACpC,MAAIA,KAAK,IAAIE,QAAQ,CAACL,MAAM,CAACM,SAAP,CAAiB,EAAjB,EAAqB,EAArB,CAAD,CAArB,EAAiD,OAAO,KAAP;AAEjD,SAAO,IAAP;AACH,CA1BM;AA4BP,eAAe;AACXR,EAAAA,WAAW,EAAXA,WADW;AAEXL,EAAAA,WAAW,EAAXA;AAFW,CAAf","sourcesContent":["import {numberPattern} from './format';\r\n\r\nexport const onlyNumbers = (value) => {\r\n    const auxCep = (value || \"\").match(numberPattern);\r\n    return (auxCep || []).join(\"\");\r\n};\r\n\r\nexport const validateCPF = (_strCPF) => {\r\n    const strCPF = onlyNumbers(_strCPF);\r\n    if (strCPF.length !== 11) return false;\r\n    let soma;\r\n    let resto;\r\n    soma = 0;\r\n    if (strCPF == \"00000000000\") return false;\r\n        \r\n    for (var i=1; i<=9; i++) {\r\n            soma = soma + parseInt(strCPF.substring(i-1, i)) * (11 - i);\r\n    }\r\n    resto = (soma * 10) % 11;\r\n   \r\n    if ((resto == 10) || (resto == 11)) resto = 0;\r\n    if (resto != parseInt(strCPF.substring(9, 10))) return false;\r\n   \r\n    soma = 0;\r\n    for (var j = 1; j <= 10; j ++) {\r\n        soma = soma + parseInt(strCPF.substring(j-1, j)) * (12 - j);\r\n    }\r\n    resto = (soma * 10)% 11;\r\n   \r\n    if ((resto == 10) || (resto == 11)) resto = 0;\r\n    if (resto != parseInt(strCPF.substring(10, 11))) return false;\r\n\r\n    return true;\r\n};\r\n\r\nexport default {\r\n    validateCPF,\r\n    onlyNumbers\r\n};"]},"metadata":{},"sourceType":"module"}