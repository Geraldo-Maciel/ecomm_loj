{"ast":null,"code":"import { fetchCliente } from './clienteActions';\nimport { AUTENTICAR_TOKEN, AUTENTICAR, USER, DESAUTENTICAR } from '../types';\nimport axios from 'axios';\nimport { API, versao } from '../../config';\nimport { setCookie, removeCookie } from '../../utils/cookie';\nimport { getHeaders } from './helpers';\nimport Router from 'next/router';\nimport errorHandling from './errorHandling';\nexport const reauthenticate = token => ({\n  type: AUTENTICAR_TOKEN,\n  payload: token\n});\nexport const getUser = ({\n  token\n}) => dispatch => {\n  axios.get(`${API}/${versao}/api/usuarios`, getHeaders(token)).then(response => dispatch({\n    type: USER,\n    payload: response.data.usuario\n  })).catch(e => console.log(e));\n};\nexport const autenticar = ({\n  email,\n  password\n}, goTo = false, cb) => dispatch => {\n  axios.post(`${API}/${versao}/api/usuarios/login`, {\n    email,\n    password\n  }).then(response => {\n    setCookie('token', response.data.usuario.token);\n    if (goTo) Router.push(goTo);\n    dispatch({\n      type: AUTENTICAR,\n      payload: response.data\n    });\n    dispatch(fetchCliente(response.data.usuario._id, response.data.usuario.token));\n  }).catch(e => cb(errorHandling(e)));\n};\nexport const desautenticar = () => dispatch => {\n  removeCookie('token');\n  Router.push('/');\n  dispatch({\n    type: DESAUTENTICAR\n  });\n};\nexport const updateSenha = (data, token, cb) => dispatch => {\n  axios.put(`${API}/${versao}/api/usuarios`, {\n    password: data.novaSenha\n  }, getHeaders(token)).then(response => {\n    dispatch({\n      type: USER,\n      payload: response.data.usuario\n    });\n    cb(null);\n  }).catch(e => cb(errorHandling(e)));\n};\nexport default {\n  reauthenticate,\n  getUser,\n  autenticar,\n  desautenticar,\n  updateSenha\n};","map":{"version":3,"sources":["F:/APLICACAO/lojavirtual/redux/actions/authActions.js"],"names":["fetchCliente","AUTENTICAR_TOKEN","AUTENTICAR","USER","DESAUTENTICAR","axios","API","versao","setCookie","removeCookie","getHeaders","Router","errorHandling","reauthenticate","token","type","payload","getUser","dispatch","get","then","response","data","usuario","catch","e","console","log","autenticar","email","password","goTo","cb","post","push","_id","desautenticar","updateSenha","put","novaSenha"],"mappings":"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","sourcesContent":["import { fetchCliente } from './clienteActions';\r\nimport { \r\n    AUTENTICAR_TOKEN,\r\n    AUTENTICAR,\r\n    USER,\r\n    DESAUTENTICAR\r\n} from '../types';\r\nimport axios from 'axios';\r\nimport { API, versao } from '../../config';\r\nimport { setCookie, removeCookie } from '../../utils/cookie';\r\nimport { getHeaders } from './helpers';\r\nimport Router from 'next/router';\r\n\r\nimport errorHandling from './errorHandling';\r\n\r\nexport const reauthenticate = token => ({ type: AUTENTICAR_TOKEN, payload: token });\r\n\r\nexport const getUser = ({ token }) => (dispatch) => {\r\n    axios.get(`${API}/${versao}/api/usuarios`, getHeaders(token))\r\n    .then((response) => dispatch({ type: USER, payload: response.data.usuario }))\r\n    .catch(e => console.log(e));\r\n};\r\n\r\nexport const autenticar = ({ email, password }, goTo = false, cb) => dispatch => {\r\n    axios.post(`${API}/${versao}/api/usuarios/login`, {email, password})\r\n    .then((response) => {\r\n        setCookie('token', response.data.usuario.token);\r\n        if(goTo) Router.push(goTo);\r\n        dispatch({ type: AUTENTICAR, payload: response.data });\r\n        dispatch(fetchCliente(response.data.usuario._id, response.data.usuario.token));\r\n    })\r\n    .catch(e => cb(errorHandling(e)));\r\n}\r\n\r\nexport const desautenticar = () => dispatch => {\r\n    removeCookie('token');\r\n    Router.push('/');\r\n    dispatch({ type: DESAUTENTICAR });\r\n}\r\n\r\nexport const updateSenha = (data, token, cb) => dispatch => {\r\n    axios.put(\r\n        `${API}/${versao}/api/usuarios`, \r\n        { password: data.novaSenha }, \r\n        getHeaders(token)\r\n    )\r\n    .then((response) => {\r\n        dispatch({ type: USER, payload: response.data.usuario });\r\n        cb(null);\r\n    })\r\n    .catch(e => cb(errorHandling(e)));\r\n}\r\n\r\nexport default {\r\n    reauthenticate,\r\n    getUser,\r\n    autenticar,\r\n    desautenticar,\r\n    updateSenha\r\n};"]},"metadata":{},"sourceType":"module"}